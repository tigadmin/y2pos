{"remainingRequest":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021-v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021-v2/src/components/RestaurantPos1.vue?vue&type=template&id=d5165b2c&scoped=true&","dependencies":[{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021-v2/src/components/RestaurantPos1.vue","mtime":1630411560557},{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021-v2/node_modules/cache-loader/dist/cjs.js","mtime":1633251850533},{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021-v2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1633251890074},{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021-v2/node_modules/cache-loader/dist/cjs.js","mtime":1633251850533},{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021-v2/node_modules/vue-loader/lib/index.js","mtime":1633251890074}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}