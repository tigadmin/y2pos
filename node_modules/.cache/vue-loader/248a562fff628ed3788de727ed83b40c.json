{"remainingRequest":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021-v2/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021-v2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021-v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021-v2/src/components/RestaurantOnlineOrdering3.vue?vue&type=template&id=7c930162&scoped=true&","dependencies":[{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021-v2/src/components/RestaurantOnlineOrdering3.vue","mtime":1630411560556},{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021-v2/node_modules/cache-loader/dist/cjs.js","mtime":1630411548299},{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021-v2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1630411556431},{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021-v2/node_modules/cache-loader/dist/cjs.js","mtime":1630411548299},{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021-v2/node_modules/vue-loader/lib/index.js","mtime":1630411556431}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}