{"remainingRequest":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021/src/components/HelloWorld1.vue?vue&type=template&id=e666b85e&scoped=true&","dependencies":[{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021/src/components/HelloWorld1.vue","mtime":1625061311397},{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021/node_modules/cache-loader/dist/cjs.js","mtime":1625061346027},{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1625060760680},{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021/node_modules/cache-loader/dist/cjs.js","mtime":1625061346027},{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021/node_modules/vue-loader/lib/index.js","mtime":1625060760680}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}