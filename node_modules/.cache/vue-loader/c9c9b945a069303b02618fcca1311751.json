{"remainingRequest":"/Users/tigadmin/web/Webstorm-Projects/yumapos-live/yumapos-live/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/tigadmin/web/Webstorm-Projects/yumapos-live/yumapos-live/node_modules/vuetify-loader/lib/loader.js??ref--18-0!/Users/tigadmin/web/Webstorm-Projects/yumapos-live/yumapos-live/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tigadmin/web/Webstorm-Projects/yumapos-live/yumapos-live/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tigadmin/web/Webstorm-Projects/yumapos-live/yumapos-live/src/components/RestaurantPos1.vue?vue&type=template&id=d5165b2c&scoped=true&","dependencies":[{"path":"/Users/tigadmin/web/Webstorm-Projects/yumapos-live/yumapos-live/src/components/RestaurantPos1.vue","mtime":1579390991420},{"path":"/Users/tigadmin/web/Webstorm-Projects/yumapos-live/yumapos-live/node_modules/cache-loader/dist/cjs.js","mtime":1564300212439},{"path":"/Users/tigadmin/web/Webstorm-Projects/yumapos-live/yumapos-live/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1577203778045},{"path":"/Users/tigadmin/web/Webstorm-Projects/yumapos-live/yumapos-live/node_modules/vuetify-loader/lib/loader.js","mtime":1576174675748},{"path":"/Users/tigadmin/web/Webstorm-Projects/yumapos-live/yumapos-live/node_modules/cache-loader/dist/cjs.js","mtime":1564300212439},{"path":"/Users/tigadmin/web/Webstorm-Projects/yumapos-live/yumapos-live/node_modules/vue-loader/lib/index.js","mtime":1577203778045}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}