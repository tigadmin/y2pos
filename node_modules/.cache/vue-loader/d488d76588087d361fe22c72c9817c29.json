{"remainingRequest":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021-v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021-v2/node_modules/vue-videobg/src/VideoBackground.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021-v2/node_modules/vue-videobg/src/VideoBackground.vue","mtime":1630411556681},{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021-v2/node_modules/css-loader/dist/cjs.js","mtime":1630411549183},{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021-v2/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1630411556431},{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021-v2/node_modules/postcss-loader/src/index.js","mtime":1630411554231},{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021-v2/node_modules/cache-loader/dist/cjs.js","mtime":1630411548299},{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021-v2/node_modules/vue-loader/lib/index.js","mtime":1630411556431}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLlZpZGVvQmcgewogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyOwogIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjsKICBvdmVyZmxvdzogaGlkZGVuOwp9CgouVmlkZW9CZyB2aWRlbyB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogNTAlOwogIGxlZnQ6IDUwJTsKICB2aXNpYmlsaXR5OiBoaWRkZW47CiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7Cn0KCi5WaWRlb0JnX19jb250ZW50IHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiAwOwogIGxlZnQ6IDA7CiAgd2lkdGg6IDEwMCU7CiAgaGVpZ2h0OiAxMDAlOwp9Cg=="},{"version":3,"sources":["VideoBackground.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VideoBackground.vue","sourceRoot":"node_modules/vue-videobg/src","sourcesContent":["<template>\n  <section class=\"VideoBg\">\n    <video autoplay loop muted ref=\"video\">\n      <source v-for=\"source in sources\" :src=\"source\" :type=\"getMediaType(source)\">\n    </video>\n    <div class=\"VideoBg__content\">\n      <slot></slot>\n    </div>\n  </section>\n</template>\n\n\n<script>\n  export default {\n    props: {\n      sources: {\n        type: Array,\n        required: true\n      },\n      img: {\n        type: String\n      }\n    },\n\n    data () {\n      return {\n        videoRatio: null\n      }\n    },\n\n    mounted () {\n      this.setImageUrl()\n      this.setContainerHeight()\n\n      if (this.videoCanPlay()) {\n        this.$refs.video.oncanplay = () => {\n          if (!this.$refs.video) return\n\n          this.videoRatio = this.$refs.video.videoWidth / this.$refs.video.videoHeight\n          this.setVideoSize()\n          this.$refs.video.style.visibility = 'visible'\n        }\n      }\n\n      window.addEventListener('resize', this.resize)\n    },\n\n    beforeDestroy () {\n      window.removeEventListener('resize', this.resize)\n    },\n\n    methods: {\n      resize () {\n        this.setContainerHeight()\n\n        if (this.videoCanPlay()) {\n          this.setVideoSize()\n        }\n      },\n\n      videoCanPlay () {\n        return !!this.$refs.video.canPlayType\n      },\n\n      setImageUrl () {\n        if (this.img) {\n          this.$el.style.backgroundImage = `url(${this.img})`\n        }\n      },\n\n      setContainerHeight () {\n        this.$el.style.height = `${window.innerHeight}px`\n      },\n\n      setVideoSize () {\n        var width, height, containerRatio = this.$el.offsetWidth / this.$el.offsetHeight\n\n        if (containerRatio > this.videoRatio) {\n          width = this.$el.offsetWidth\n        } else {\n          height = this.$el.offsetHeight\n        }\n\n        this.$refs.video.style.width = width ? `${width}px` : 'auto'\n        this.$refs.video.style.height = height ? `${height}px` : 'auto'\n      },\n\n      getMediaType (src) {\n        return 'video/' + src.split('.').pop()\n      }\n    }\n  }\n</script>\n\n\n<style>\n  .VideoBg {\n    position: relative;\n    background-size: cover;\n    background-position: center;\n    overflow: hidden;\n  }\n\n  .VideoBg video {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    visibility: hidden;\n    transform: translate(-50%, -50%);\n  }\n\n  .VideoBg__content {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n  }\n</style>\n"]}]}