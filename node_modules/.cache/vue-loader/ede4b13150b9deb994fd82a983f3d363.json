{"remainingRequest":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021/src/components/RestaurantPos2.vue?vue&type=template&id=6581beb4&scoped=true&","dependencies":[{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021/src/components/RestaurantPos2.vue","mtime":1625061311399},{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021/node_modules/cache-loader/dist/cjs.js","mtime":1625061346027},{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1625060760680},{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021/node_modules/cache-loader/dist/cjs.js","mtime":1625061346027},{"path":"/Users/tigadmin/WEB/Webstorm-Projects/yumaspos-2021/node_modules/vue-loader/lib/index.js","mtime":1625060760680}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}